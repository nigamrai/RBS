let jwt,ACCESS_TOKEN_SECRET,REFRESH_TOKEN_SECRET,Token;_6f7‍.x([["default",()=>_6f7‍.o]]);_6f7‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_6f7‍.w("../config",[["ACCESS_TOKEN_SECRET",["ACCESS_TOKEN_SECRET"],function(v){ACCESS_TOKEN_SECRET=v}],["REFRESH_TOKEN_SECRET",["REFRESH_TOKEN_SECRET"],function(v){REFRESH_TOKEN_SECRET=v}]]);_6f7‍.w("../models/token.model",[["default",["Token"],function(v){Token=v}]]);


class jwtUtil{
    generateTokens(payload){
        const accessToken=jwt.sign(payload,ACCESS_TOKEN_SECRET,{expiresIn:'1h'})
        const refreshToken=jwt.sign(payload,REFRESH_TOKEN_SECRET,{expiresIn:'1y'})
        return {accessToken,refreshToken}
    }
     async storeRefreshToken(userId,token){
     try{
        await Token.create({
            userId,
            token
        })
     }catch(error){
        _6f7‍.g.console.log(error.message);
     }

    }
}
const jwtService=new jwtUtil();
_6f7‍.d(jwtService);